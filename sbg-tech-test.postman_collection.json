{
	"info": {
		"_postman_id": "275b10da-a94e-46b8-bf54-5a314af3e36f",
		"name": "sbg-tech-test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "11755981"
	},
	"item": [
		{
			"name": "QUERY",
			"item": [
				{
					"name": "Query game",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"//Validate API status",
									"pm.test(\"Check status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Validate enviroment is correct",
									"    pm.test(\"Check the active test environment is correct\", () => {",
									"    pm.expect(pm.environment.name).to.eql(\"Local\");",
									"});",
									"",
									"//Validate query matches TYPE expected",
									"pm.test(\"Assert supplier type is correct as per declared\",() => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.data.game.id).to.be.a(\"number\");",
									"    pm.expect(responseJson.data.game.name).to.be.a(\"string\");",
									"    pm.expect(responseJson.data.now).to.be.a(\"string\"); ",
									"    pm.expect(responseJson.data.game.name).to.be.a(\"string\");",
									"    pm.expect(responseJson.data.game.slug).to.be.a(\"string\");",
									"    pm.expect(responseJson.data.game.supplier.id).to.be.a(\"number\");",
									"    pm.expect(responseJson.data.game.supplier.name).to.be.a(\"string\");",
									"});",
									"",
									"//Validate name of query is NOT NULL",
									"pm.test(\"Assert data not null\",() => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.data.game.id).not.null;",
									"    pm.expect(responseJson.data.now).not.null;",
									"    pm.expect(responseJson.data.game.name).not.null;",
									"    pm.expect(responseJson.data.game.slug).not.null;",
									"    pm.expect(responseJson.data.game.supplier).not.null;",
									"    pm.expect(responseJson.data.game.supplier.id).not.null;",
									"    pm.expect(responseJson.data.game.supplier.name).not.null;",
									"});",
									"",
									"//Validate name and slug do not eturn empty value",
									"pm.test(\"Name and slug can't be empty field\",() => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.data.game.name).is.not.empty.string;",
									"    pm.expect(responseJson.data.game.slug).is.not.empty.string;",
									"});",
									"",
									"//Check errors not returned for valid request",
									"pm.test(\"Check errors not returned\",() => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).not.to.have.property(\"errors\")",
									"});",
									"",
									"//Validate id is equal ",
									"pm.test(\"Name and slug show as empty field\",() => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.data.game.id).to.be.eql(5);",
									"",
									"});",
									"",
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query\n  {\n    now\n    game(id:5)\n    {  \n      id\n      name\n      slug   \n      supplier {\n          id\n          name\n      }             \n    }\n  }",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Query game negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"//Validate query does show empty slug and name",
									"pm.test(\"Name and slug show as empty field\",() => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.data.game.id).is.empty.string;",
									"});"
								]
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query\n  {\n    now\n    game(id:17)\n    {  \n      id\n      name\n      slug   \n      supplier {\n          id\n          name\n      }             \n    }\n  }",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "MUTATION",
			"item": []
		},
		{
			"name": "AddGame mutation",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"//Validate API status",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//Validate enviroment is correct",
							"pm.test(\"Check the active environment\", () => {",
							"    pm.expect(pm.environment.name).to.eql(\"Local\");",
							"});",
							"",
							"//Validate mutation data return not null",
							"pm.test(\"Assert data not null\",() => {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.data.addGame.id).not.null;",
							"    pm.expect(responseJson.data.addGame.name).not.null;",
							"    pm.expect(responseJson.data.addGame.slug).not.null;",
							"});",
							"",
							"",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation AddGame($input: GameInput!) {\r\n    addGame(input: $input) {\r\n        id\r\n        slug\r\n        name\r\n        supplier{\r\n        id\r\n        name\r\n        }\r\n    }\r\n}",
						"variables": "{\n    \"input\": {\n        \"name\": \"test115\",\n        \"slug\": \"test115\",\n        \"supplier\": \"1\"\n    }\n}\n\n"
					}
				},
				"url": {
					"raw": "{{url}}",
					"host": [
						"{{url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "AddGame mutation negative",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"//Validate name and slug return empty value",
							"pm.test(\"Name and slug can't be empty field\",() => {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.data.addgame.name).is.empty.string;",
							"    pm.expect(responseJson.data.addgame.slug).is.empty.string;",
							"});",
							"",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation AddGame($input: GameInput!) {\r\n    addGame(input: $input) {\r\n        id\r\n        slug\r\n        name\r\n        supplier{\r\n        id\r\n        name\r\n        }\r\n    }\r\n}",
						"variables": "{\n    \"input\": {\n        \"name\": \"\",\n        \"slug\": \"\",\n        \"supplier\": \"2\"\n    }\n}\n\n"
					}
				},
				"url": {
					"raw": "{{url}}",
					"host": [
						"{{url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "AddGame mutation duplicate",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"//Validate duplicate results can't be added",
							"",
							"pm.test(\"Check can't add duplicate results\",  () => {",
							"    pm.expect(pm.response.text()).to.include(\"already exists!\");",
							"});",
							"",
							"",
							"",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation AddGame($input: GameInput!) {\r\n    addGame(input: $input) {\r\n        id\r\n        slug\r\n        name\r\n        supplier{\r\n        id\r\n        name\r\n        }\r\n    }\r\n}",
						"variables": "{\n    \"input\": {\n        \"name\": \"test9\",\n        \"slug\": \"test9\",\n        \"supplier\": \"1\"\n    }\n}"
					}
				},
				"url": {
					"raw": "{{url}}",
					"host": [
						"{{url}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "url",
			"value": "http://localhost:4000/graphql",
			"type": "string"
		},
		{
			"key": "f65c7d27-1e77-4143-8867-0da7d83ab721",
			"value": "",
			"type": "string",
			"disabled": true
		}
	]
}